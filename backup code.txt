
// Read every file in ./commands and filter out the non-JS files
fs.readdirSync(path.resolve(__dirname, 'commands'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading command ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'Command is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'Command is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load command ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/Admin/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading Utility ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/Admin/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'Admin is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'Admin is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load Admin ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/emojis/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading emojis ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/emojis/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'emojis is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'emojis is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load emojis ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/Fivem/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading Fivem ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/Fivem/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'Fivem is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'Fivem is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load Fivem ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/Games/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading Games ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/Games/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'Games is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'Games is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load Games ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/info/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading info ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/info/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'info is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'info is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load info ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/jokes/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading jokes ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/jokes/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'jokes is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'jokes is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load jokes ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/Misc/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading Misc ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/Misc/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'Misc is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'Misc is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load Misc ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/Moderation/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading Moderation ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/Moderation/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'Moderation is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'Moderation is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load Moderation ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/Owner/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading Moderation ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/Owner/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'Owner is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'Owner is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load Owner ${f}: ${error}`);
        }
    });
    
    fs.readdirSync(path.resolve(__dirname, './commands/Randomstuff/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading Randomstuff ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/Randomstuff/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'Randomstuff is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'Randomstuff is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load Randomstuff ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/Status/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading Status ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/Status/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'Status is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'Status is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load Status ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/ticket_system/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading ticket_system ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/ticket_system/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'ticket_system is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'ticket_system is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load ticket_system ${f}: ${error}`);
        }
    });

    fs.readdirSync(path.resolve(__dirname, './commands/Utility/'))
    .filter(f => f.endsWith('.js'))
    .forEach(f => {
        // Attempt to load the file
        console.log(`Loading Utility ${f}`);
        try {
            // Require the raw file
            let command = require(`./commands/Utility/${f}`);
            // Validate that there's a run function and a valid help object
            if (typeof command.run !== 'function') {
                throw 'Utility is missing a run function!';
            } else if (!command.help || !command.help.name) {
                throw 'Utility is missing a valid help object!';
            }
            // Store the command in the map based on its name
            commands.set(command.help.name, command);
        } catch (error) {
            // Log any errors from the validator or from requiring the file
            console.error(`Failed to load Utility ${f}: ${error}`);
        }
    });
